/*
// Definition for a Node.
class Node {
    public int val;
    public List<Node> neighbors;
    public Node() {
        val = 0;
        neighbors = new ArrayList<Node>();
    }
    public Node(int _val) {
        val = _val;
        neighbors = new ArrayList<Node>();
    }
    public Node(int _val, ArrayList<Node> _neighbors) {
        val = _val;
        neighbors = _neighbors;
    }
}
*/

class Solution {
    
    public Node cloneGraph(Node node) {
        if(node==null)
            return node;
        
        HashMap<Node,Node> map=new HashMap<>();
        
        Node temp=new Node(node.val);
        Queue<Node> q=new LinkedList<>();
        map.put(node,temp);
        q.offer(node);
        while(!q.isEmpty())
        {
            
            Node tem=q.poll();
            List<Node> neigh=map.get(tem).neighbors;
            for(Node n:tem.neighbors)
            {
                if(!map.containsKey(n))
                {
                    Node t=new Node(n.val);
                    map.put(n,t);
                    q.offer(n);
                }
                neigh.add(map.get(n));
            }

        }
        return temp;
        
    }
    
}