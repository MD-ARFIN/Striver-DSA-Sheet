
class Solution {

  public static String completeString(int n, String[] a) {
    // Write your code here.
      Trie trie=new Trie();
      for(String s:a)
          trie.insert(s);
      String ans="";
      for(String s:a)
      {
          if(trie.search(s))
          {
              if(s.length()>ans.length())
              {
                  ans=s;
              }
              else if(s.length()==ans.length() && s.compareTo(ans)<0)
                  ans=s;
          }
      }
     return ans.length()==0?"None":ans;
  }
}
class Node
{
    Node[] links;
    boolean flag;
    Node()
    {
        this.links=new Node[26];
        flag=false;
    }
    void put(char ch,Node node)
    {
        links[ch-'a']=node;
    }
    Node get(char ch)
    {
        return links[ch-'a'];
    }
    boolean contains(char ch)
    {
        return links[ch-'a']!=null;
    }
    void setEnd()
    {
        this.flag=true;
    }
    boolean isEnd()
    {
        return flag;
    }
}
class Trie
{
    Node root;
    Trie()
    {
        this.root=new Node();
    }
    void insert(String word)
    {
        Node node=root;
        for(int i=0;i<word.length();i++)
        {
            char ch=word.charAt(i);
            if(!node.contains(ch))
            {
                node.put(ch,new Node());
            }
            node=node.get(ch);
        }
        node.setEnd();
    }
    boolean search(String word)
    {
        Node node=root;
        for(int i=0;i<word.length();i++)
        {
            char ch=word.charAt(i);
            //System.out.println(ch+"llp");
            if(!node.contains(ch))
                return false;
            node=node.get(ch);
            if(!node.isEnd())
                return false;
        }
        return node.isEnd();
    }
}