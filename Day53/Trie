class Trie {
    Node root;
    public Trie() {
        root=new Node();
    }
    
    public void insert(String word) {
        Node node=root;
        for(int i=0;i<word.length();i++)
        {
            char ch=word.charAt(i);
            if(!node.contains(ch))
            {
                node.put(ch,new Node());
            }
            
            node=node.get(ch);
        }
        node.setEnd();
    }
    
    public boolean search(String word) {
        Node node=root;
        for(int i=0;i<word.length();i++)
        {
            char ch=word.charAt(i);
            
            if(!node.contains(ch))
            {
                //System.out.println(ch);
                return false;
            }
            node=node.get(ch);
        }
        return node.checkEnd();
    }
    
    public boolean startsWith(String word) {
        Node node=root;
        for(int i=0;i<word.length();i++)
        {
            char ch=word.charAt(i);
            if(!node.contains(ch))
                return false;
            node=node.get(ch);
        }
        return true;
    }
}

/**
 * Your Trie object will be instantiated and called as such:
 * Trie obj = new Trie();
 * obj.insert(word);
 * boolean param_2 = obj.search(word);
 * boolean param_3 = obj.startsWith(prefix);
 */
class Node
{
    Node[] links;
    boolean isEnd;
    Node()
    {
        this.links=new Node[26];
        this.isEnd=false;
    }
    boolean contains(char ch)
    {
        return this.links[ch-'a']!=null;
    }
    void put(char ch,Node node)
    {
        this.links[ch-'a']=node;
    }
    
    Node get(char ch){
        return this.links[ch-'a'];
    }
    void setEnd()
    {
        this.isEnd=true;
    }
    boolean checkEnd(){
        return this.isEnd;
    }
}