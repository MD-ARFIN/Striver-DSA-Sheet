import java.util.*;
public class Solution {
	public static int matrixMultiplication(int[] arr , int N) {
		// Write your code here
        int[][] dp=new int[N][N];
        for(int i=N-1;i>=0;i--)
        {
            for(int j=i+1;j<N;j++)
            {
                int mini=Integer.MAX_VALUE;
                System.out.println(j+";;"+i);
                for(int k=i;k<j;k++)
                {
                    System.out.println(j+";pol;"+i+"ppp"+k);
                    int sum=arr[i-1]*arr[k]*arr[j]+dp[i][k]+dp[k+1][j];
                    mini=Math.min(mini,sum);
                }
                dp[i][j]=mini;
            }
        }
        return dp[1][N-1];
	}
//     public static int find(int[] arr,int i,int j,int[][] dp)
//     {
//         if(i>=j)
//             return 0;
//         if(dp[i][j]!=-1)
//             return dp[i][j];
//         int min=Integer.MAX_VALUE;
//         for(int k=i;k<j;k++)
//         {
//             int temp=0;
//             if(dp[i][k]!=-1)
//                 temp+=dp[i][k];
//             else
//                 temp+=dp[i][k]=find(arr,i,k,dp);
//             if(dp[k+1][j]!=-1)
//                 temp+=dp[k+1][j];
//             else
//                 temp+=dp[k+1][j]=find(arr,k+1,j,dp);
            
//             temp+=arr[i-1]*arr[k]*arr[j];
//             min=Math.min(min,temp);
//         }
//         return dp[i][j]=min;
//     }
}
