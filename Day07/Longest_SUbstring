import java.util.* ;
import java.io.*; 
public class Solution 
{
	public static int uniqueSubstrings(String input) 
    {
		//write your code here
        Set<Character> s=new HashSet<>();
        int maxCount=0;
        int l=0,r=0;
        while(r<input.length())
        {
            while(l<r && s.contains(input.charAt(r)))
            {
                s.remove(input.charAt(l));
                l++;
            }
            s.add(input.charAt(r));
            maxCount=Math.max(maxCount,r-l+1);
            r++;
        }
       
        return maxCount;
	}
}

/** time O(2*n) */
 // so best approach is to use a map which will have time complexity O(n)


 /*
  * 
  import java.util.* ;
import java.io.*; 
public class Solution 
{
	public static int uniqueSubstrings(String input) 
    {
		//write your code here
        Map<Character,Integer> s=new HashMap<>();
        int maxCount=0;
        int l=0,r=0;
        while(r<input.length())
        {
           if(s.containsKey(input.charAt(r)) && s.get(input.charAt(r))>=l)
           {
               l=s.get(input.charAt(r))+1;
               s.put(input.charAt(r),r);
           }
            else
                s.put(input.charAt(r),r);
            maxCount=Math.max(maxCount,r-l+1);
            r++;
        }
        return maxCount;
	}
}

  */