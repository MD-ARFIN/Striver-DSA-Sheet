class Solution {
    public int[] maxSlidingWindow(int[] nums, int k) {
        int p=0;
        int n=nums.length;
        int[] arr=new int[n-k+1];
        Deque<Integer> deque=new ArrayDeque<>();
        for(int i=0;i<n;i++)
        {
            if(!deque.isEmpty() && deque.peek()==i-k)
                deque.poll();
            while(!deque.isEmpty() && nums[deque.peekLast()]<=nums[i])
                deque.pollLast();
            deque.offer(i);
            if(i>=k-1)
                arr[p++]=nums[deque.peek()];
        }
        return arr;
    }
}

......................................................................



import java.util.*;

public class Solution 
{

	public static ArrayList<Integer> getMaximumOfSubarrays(ArrayList<Integer> nums, int k) 
	{
		//	  Write your code here.
        ArrayList<Integer> ans=new ArrayList<>();
        Deque<Integer> q=new ArrayDeque<>();
        for(int i=0;i<nums.size();i++)
        {
            if(!q.isEmpty() && q.peek()==i-k)
                q.poll();
            while(!q.isEmpty() && nums.get(q.peekLast())<=nums.get(i))
                q.pollLast();
            q.offer(i);
            if(i>=k-1)
                ans.add(nums.get(q.peek()));
        }
        return ans;
	}
    
}