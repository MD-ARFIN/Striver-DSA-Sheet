class Solution
{
    public boolean isBipartite(int V, ArrayList<ArrayList<Integer>>adj)
    {
        // Code here
        int color[]=new int[V];
        for(int i=0;i<V;i++)
        {
            if(color[i]==0)
            {
                if(!check(adj,i,1,color))
                    return false;
            }
        }
        return true;
    }
    public boolean check(ArrayList<ArrayList<Integer>> adj,int start,int col,int[] color)
    {
        
        Queue<int[]> q=new LinkedList<>();
        q.offer(new int[]{start,col});
        while(!q.isEmpty())
        {
            int[] temp=q.poll();
            color[temp[0]]=temp[1];
            for(Integer node:adj.get(temp[0]))
            {
                if(color[node]==0)
                {
                    int t=temp[1]==1?-1:1;
                    q.offer(new int[]{node,t});
                }
                else if(color[node]==temp[1])
                    return false;
                
            }
        }
        return true;
    }
}